-- Load the WindUI framework
local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

-- Create the window
local Window = WindUI:CreateWindow({
    Title = "DR Hub",
    Icon = "atom",
    Author = "by @draco",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = "XRHV1KS",
        Note = "Key In Discord",
        URL = "https://discord.gg/U3Ahz8MM",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Red",
    SideBarWidth = 175,
    HasOutline = true,
})

-- General Tab
local Tab1 = Window:Tab({
    Title = "General",
    Icon = "globe",
})

Window:Divider()

-- Execution Tab
local Tab2 = Window:Tab({
    Title = "Execution",
    Icon = "folder",
})

-- Image for Monkey Pop-Up
local function ShowMonkeyImage()
    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Create the ImageLabel
    local ImageLabel = Instance.new("ImageLabel")
    ImageLabel.Parent = ScreenGui
    ImageLabel.Size = UDim2.new(0.2, 0, 0.2, 0)
    ImageLabel.Position = UDim2.new(0.4, 0, 0.4, 0)
    ImageLabel.BackgroundTransparency = 1
    ImageLabel.Image = "https://your-image-url.com/monkey.jpg"  -- Put your monkey image URL here
    ImageLabel.ImageTransparency = 0  -- Set opacity to full (visible)

    -- Fade Out Animation
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local goal = {ImageTransparency = 1}  -- Make it fully transparent
    local tween = game:GetService("TweenService"):Create(ImageLabel, tweenInfo, goal)

    tween:Play()
    tween.Completed:Connect(function()
        ScreenGui:Destroy()  -- Destroy the image after the animation completes
    end)
end

-- Trigger the Monkey image pop-up
ShowMonkeyImage()

-- General Settings
local Section1 = Tab1:Section({
    Title = "Shooting & Indicator",
    TextXAlignment = "Left",
    TextSize = 17,
})

-- Dropdown for shooting type
local Dropdown = Tab1:Dropdown({
    Title = "Shooting Type",
    Value = "Tab 1",
    Multi = false,
    AllowNone = true,
    Values = {
        "Silent Aim", "Camlock"
    },
    Callback = function(value)
        print(value)
        if value == "Camlock" then
            Camlock()  -- Call the Camlock function when selected
        end
    end
})

-- Indicator Toggle
local Toggle1 = Tab1:Toggle({
    Title = "Enable Shooting",
    Value = true,
    Callback = function(state)
        print(state)
    end,
})

-- FPS Optimization - Remove unnecessary calls and reduce the amount of work in `RenderStepped`
local lastFPS = tick()

local function OptimizeFPS()
    local now = tick()
    if now - lastFPS > 1 then  -- Execute once every second to reduce load
        lastFPS = now
        -- Only call logic that needs to be updated once every second
        -- This reduces unnecessary checks on every frame
    end
end

game:GetService("RunService").RenderStepped:Connect(OptimizeFPS)

-- Reach & Mags Section
local Section2 = Tab1:Section({
    Title = "Reach & Mags",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Toggle3 = Tab1:Toggle({
    Title = "Enable Reach + Mags",
    Value = true,
    Callback = function(state)
        print(state)
    end,
})

-- Slider for Reach Distance
local Slider1 = Tab1:Slider({
    Title = "Reach Distance",
    Step = 1,
    Value = {
        Min = 0,
        Max = 75,
        Default = 70,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New MAX_DISTANCE: " .. MAX_DISTANCE)
    end
})

-- Slider for Mags Distance
local Slider2 = Tab1:Slider({
    Title = "Mags Distance",
    Step = 1,
    Value = {
        Min = 0,
        Max = 100,
        Default = 70,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New MAX_DISTANCE: " .. MAX_DISTANCE)
    end
})

-- FPS Optimized Simulation
local function simulateTouch(part1, part2)
    -- Reduce touch simulation calls to improve FPS performance
    if tick() % 0.1 < 0.02 then  -- Limit touch simulation to once every 100ms
        firetouchinterest(part1, part2, 0)
        task.wait(0.05)
        firetouchinterest(part1, part2, 1)
    end
end

-- Get Nearest Ball Function
local function getNearestBall()
    local nearestBall = nil
    local nearestDistance = MAX_DISTANCE
    local searchScope = workspace:GetPartBoundsInBox(humanoidRootPart.CFrame, Vector3.new(MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE))

    for _, object in ipairs(searchScope) do
        if object:IsA("BasePart") and object.Name:lower() == "ball" then
            local distance = (object.Position - humanoidRootPart.Position).Magnitude
            if distance <= nearestDistance then
                nearestDistance = distance
                nearestBall = object
            end
        end
    end
    return nearestBall, nearestDistance
end

-- FPS Optimized Heartbeat Function
game:GetService("RunService").Heartbeat:Connect(function()
    local ball, distance = getNearestBall()
    if ball then
        simulateTouch(humanoidRootPart, ball)
        print("Touched nearest ball:", ball.Name, "at distance:", distance)
    end
end)

-- Improved Camlock Function
local function Camlock()
    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")
    local Player = Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Camera = Workspace.CurrentCamera
    local Humanoid = Character:WaitForChild("Humanoid")
    local UserInputService = game:GetService("UserInputService")

    local CamlockEnabled = true

    local function CameraAndArcCalculate()
        if not CamlockEnabled then return end
        local Goal, Distance = GetGoal()

        if Goal then
            local HoopPosition = Goal.Position
            local ArcAdjustment = HighArc(math.floor(Distance))
            if ArcAdjustment == 0 then
                ArcAdjustment = LowArc(math.floor(Distance))
            end

            local BasketPosition = HoopPosition + Vector3.new(0, ArcAdjustment, 0)
            local LookDirection = (BasketPosition - Camera.CFrame.Position).unit
            local UpwardOffset = Vector3.new(0, 0.3, 0)
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, BasketPosition + UpwardOffset)
        end
    end

    -- Mouse button click event to toggle Camlock (Middle Click)
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end

        -- Check for Middle Mouse Button (MouseButton2)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            -- Toggle CamlockEnabled on middle mouse click
            CamlockEnabled = not CamlockEnabled
            if CamlockEnabled then
                print("Camera lock enabled")
            else
                print("Camera lock disabled")
            end
        end
    end)

    Humanoid.StateChanged:Connect(function(_, NewState)
        if CamlockEnabled and NewState == Enum.HumanoidStateType.Jumping then
            CameraAndArcCalculate()
        end
    end)
end

Camlock()
