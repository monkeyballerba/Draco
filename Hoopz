-- Load UI Framework (Assuming WindUI is available)
local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

-- Create a Window with a new design and theme
local Window = WindUI:CreateWindow({
    Title = "DR Hub", 
    Icon = "atom", 
    Author = "by @draco", 
    Folder = "CloudHub", 
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = "XRHV1KS", 
        Note = "Key In Discord", 
        URL = "https://discord.gg/U3Ahz8MM", 
        SaveKey = true, 
    }, 
    Transparent = true,
    Theme = "Rainbow",  -- Static rainbow theme
    SideBarWidth = 175,
    HasOutline = true, 
    Rounded = true,  -- Rounded corners for a modern look
})

-- General Tab
local Tab1 = Window:Tab({
    Title = "General",
    Icon = "globe", 
})

Window:Divider()

-- Execution Tab
local Tab2 = Window:Tab({
    Title = "Execution",
    Icon = "folder", 
})

-- Enhanced Reach & Mags Section
local Section2 = Tab1:Section({ 
    Title = "Reach & Mags",
    TextXAlignment = "Left",
    TextSize = 17,
})

local ReachSlider = Tab1:Slider({
    Title = "Reach Distance",
    Step = 1,
    Value = {
        Min = 0,
        Max = 75,
        Default = 70,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        ReachIndicator.Text = "Reach Distance: " .. value
        print("New Reach Distance: " .. MAX_DISTANCE)
    end,
})

local ReachIndicator = Tab1:Label({
    Title = "Reach Distance",
    Text = "Reach Distance: " .. MAX_DISTANCE
})

local MagSlider = Tab1:Slider({
    Title = "Mags Distance",
    Step = 1,
    Value = {
        Min = 0,
        Max = 100,
        Default = 70,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        MagIndicator.Text = "Mags Distance: " .. value
        print("New Mags Distance: " .. MAX_DISTANCE)
    end,
})

local MagIndicator = Tab1:Label({
    Title = "Mags Distance",
    Text = "Mags Distance: " .. MAX_DISTANCE
})

-- Enhanced Camlock Section
local Section3 = Tab1:Section({ 
    Title = "Camlock",
    TextXAlignment = "Left",
    TextSize = 17,
})

local CamlockToggle = Tab1:Toggle({
    Title = "Enable Camlock",
    Desc = "Enable/Disable Camlock",
    Value = true,
    Callback = function(state)
        if state then
            print("Camlock Enabled")
        else
            print("Camlock Disabled")
        end
    end,
})

-- Enhanced Shot Indicator Section
local Section4 = Tab1:Section({ 
    Title = "Shot Indicator",
    TextXAlignment = "Left",
    TextSize = 17,
})

local ShotIndicatorToggle = Tab1:Toggle({
    Title = "Enable Shot Indicator",
    Desc = "Enable/Disable Shot Indicator",
    Value = true,
    Callback = function(state)
        local ScreenGui = Instance.new("ScreenGui")
        ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Parent = ScreenGui
        TextLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
        TextLabel.Position = UDim2.new(0.35, 0, 0, 10)
        TextLabel.BackgroundTransparency = 1
        TextLabel.TextScaled = true
        TextLabel.TextColor3 = Color3.new(1, 1, 1)
        TextLabel.Font = Enum.Font.SourceSansBold

        local function UpdateShotStatus()
            -- Logic for updating the shot indicator
            local shotStatus = "Perfect Shot!"  -- This should be dynamic based on conditions
            TextLabel.Text = shotStatus
            if shotStatus == "Perfect Shot!" then
                TextLabel.TextColor3 = Color3.new(0, 1, 0)
            else
                TextLabel.TextColor3 = Color3.new(1, 0, 0)
            end
        end

        game:GetService("RunService").RenderStepped:Connect(function()
            if state then
                UpdateShotStatus()
            else
                TextLabel.Text = ""
            end
        end)
    end,
})

-- Silent Aim Section
local Section5 = Tab1:Section({ 
    Title = "Silent Aim",
    TextXAlignment = "Left",
    TextSize = 17,
})

local SilentAimToggle = Tab1:Toggle({
    Title = "Enable Silent Aim",
    Desc = "Enable/Disable Silent Aim",
    Value = false,
    Callback = function(state)
        if state then
            print("Silent Aim Enabled")
        else
            print("Silent Aim Disabled")
        end
    end,
})

-- Camlock Function with smooth camera control
local function Camlock()
    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")
    local Player = Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Camera = Workspace.CurrentCamera
    local Humanoid = Character:WaitForChild("Humanoid")
    local UserInputService = game:GetService("UserInputService")

    local CamlockEnabled = true  

    local function CameraAndArcCalculate()
        if not CamlockEnabled then return end
        local Goal, Distance = GetGoal()
        
        if Goal then
            local HoopPosition = Goal.Position
            local ArcAdjustment = HighArc(math.floor(Distance))  
            if ArcAdjustment == 0 then
                ArcAdjustment = LowArc(math.floor(Distance))  
            end
            
            local BasketPosition = HoopPosition + Vector3.new(0, ArcAdjustment, 0)
            local LookDirection = (BasketPosition - Camera.CFrame.Position).unit
            local UpwardOffset = Vector3.new(0, 0.3, 0)  
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, BasketPosition + UpwardOffset)
        end
    end

    -- Mouse button click event to toggle Camlock (Middle Click)
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end

        -- Check for Middle Mouse Button (MouseButton2)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            -- Toggle CamlockEnabled on middle mouse click
            CamlockEnabled = not CamlockEnabled
            if CamlockEnabled then
                print("Camera lock enabled")
            else
                print("Camera lock disabled")
            end
        end
    end)

    Humanoid.StateChanged:Connect(function(_, NewState)
        if CamlockEnabled and NewState == Enum.HumanoidStateType.Jumping then
            CameraAndArcCalculate()
        end
    end)
end

-- Call the function to initialize Camlock
Camlock()
